using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.ServiceModel;
using System.Security.Cryptography;
using System.Web;
using System.Net;

namespace EquellaMetadataUtility
{
    // a subclass of the auto-generated SOAP client generated by Visual Studio
    public class EquellaClient : EQUELLA.SoapService41PortTypeClient
    {
        private static BasicHttpBinding binding = new BasicHttpBinding();
        private const int maxReceivedMessageSize = 100000000;
        private const int maxBufferSize = 100000000;
        private const int maxStringContentLength = 100000000;
        private static TimeSpan sendTimeout = new TimeSpan(0, 5, 0);
        private static TimeSpan receiveTimeout = new TimeSpan(0, 10, 0);

        // constructor inherits the auto-generated soap proxy constructor and overrides it
        // with an overload that simply takes and endpoint url
        public EquellaClient(string endPoint) : base(binding, new EndpointAddress(endPoint))
        {
            binding.AllowCookies = true;
            binding.MaxReceivedMessageSize = maxReceivedMessageSize;
            binding.MaxBufferSize = maxBufferSize;
            binding.ReaderQuotas.MaxStringContentLength = maxStringContentLength;
            binding.UseDefaultWebProxy = false;
            binding.SendTimeout = sendTimeout;
            binding.ReceiveTimeout = receiveTimeout;
            System.Net.ServicePointManager.Expect100Continue = false;

            if (endPoint.Trim().StartsWith("https://"))
            {
                binding.Security.Mode = BasicHttpSecurityMode.Transport;
            }
            else
            {
                binding.Security.Mode = BasicHttpSecurityMode.None;
            }

        }

        // constructor inherits the auto-generated soap proxy constructor and overrides it
        // with an overload that takes an endpoint url and proxy settings
        public EquellaClient(string endPoint, string proxyAddress, string proxyUsername, string proxyPassword)
            : base(binding, new EndpointAddress(endPoint))
        {
            binding.AllowCookies = true;
            binding.MaxReceivedMessageSize = maxReceivedMessageSize;
            binding.MaxBufferSize = maxBufferSize;
            binding.ReaderQuotas.MaxStringContentLength = maxStringContentLength;
            WebProxy proxy = new WebProxy(proxyAddress, true);
            proxy.Credentials = new NetworkCredential(proxyUsername, proxyUsername, "");
            WebRequest.DefaultWebProxy = proxy;
            binding.BypassProxyOnLocal = false;
            binding.UseDefaultWebProxy = true;
            binding.SendTimeout = sendTimeout;
            binding.ReceiveTimeout = receiveTimeout;
            System.Net.ServicePointManager.Expect100Continue = false;

            if (endPoint.Trim().StartsWith("https://"))
            {
                binding.Security.Mode = BasicHttpSecurityMode.Transport;
            }

        }

        // allows login with a shared secret
        public void loginSharedSecret(string username, string sharedSecretId, string sharedSecretValue)
        {
            //generate token
            string token = GenerateToken(username, sharedSecretId, sharedSecretValue);
            this.loginWithToken(token);
        }

        // return a collection ID for a contributable collection
        public string getCollectionUUID(string collectionName)
        {
            string collectionID = "";
            XmlDocument xmlCollections = new XmlDocument();

            // get list of contributable collections
            xmlCollections.LoadXml(getContributableCollections());

            int contributableCollectionsCount = xmlCollections.ChildNodes[0].ChildNodes.Count;
            for (int i = 0; i < contributableCollectionsCount; i++)
            {
                if (xmlCollections.ChildNodes[0].ChildNodes[i].SelectSingleNode("name").InnerXml == collectionName)
                {
                    collectionID = xmlCollections.ChildNodes[0].ChildNodes[i].SelectSingleNode("uuid").InnerXml;
                    break;
                }
            }
            // if collection name not found throw an exception
            if (collectionID == "")
            {
                throw new System.InvalidOperationException("Collection not found");
            }
            return collectionID;
        }

        #region Token generation code

        static readonly DateTime Epoch = new DateTime(1970, 1, 1, 0, 0, 0, 0, new System.Globalization.GregorianCalendar(), System.DateTimeKind.Utc);

        public static string GenerateToken(string username, string sharedSecretId, string sharedSecretValue)
        {
            string time = CurrentTimeMillis().ToString();
            string plain = username + sharedSecretId + time + sharedSecretValue;

            MD5 md5 = System.Security.Cryptography.MD5.Create();
            byte[] inputBytes = System.Text.Encoding.UTF8.GetBytes(plain);
            string b64 = Convert.ToBase64String(md5.ComputeHash(inputBytes));

            return HttpUtility.HtmlEncode(username) + ":"
                                    + HttpUtility.HtmlEncode(sharedSecretId)
                                    + ":"
                                    + time
                                    + ":"
                                    + HttpUtility.HtmlEncode(b64);
        }

        private static long CurrentTimeMillis()
        {
            return (DateTime.UtcNow.Ticks - Epoch.Ticks) / TimeSpan.TicksPerMillisecond;
        }
        #endregion
    }

}
